diff --git a/daemon/daemon.go b/daemon/daemon.go
index 235788c..c190711 100644
--- a/daemon/daemon.go
+++ b/daemon/daemon.go
@@ -710,13 +710,49 @@ func (daemon *Daemon) RegisterLinks(container *Container, hostConfig *runconfig.
 
 // FIXME: harmonize with NewGraph()
 func NewDaemon(config *Config, eng *engine.Engine) (*Daemon, error) {
-	daemon, err := NewDaemonFromDirectory(config, eng)
+	daemon, err := NewDaemonFromDirectory2(config, eng)
 	if err != nil {
 		return nil, err
 	}
 	return daemon, nil
 }
 
+func NewDaemonFromDirectory2(config *Config, eng *engine.Engine) (*Daemon, error) {
+	// Claim the pidfile first, to avoid any and all unexpected race conditions.
+	// Some of the init doesn't need a pidfile lock - but let's not try to be smart.
+	if config.Pidfile != "" {
+		if err := utils.CreatePidFile(config.Pidfile); err != nil {
+			return nil, err
+		}
+		eng.OnShutdown(func() {
+			// Always release the pidfile last, just in case
+			utils.RemovePidFile(config.Pidfile)
+		})
+	}
+
+	// Check that the system is supported and we have sufficient privileges
+	if runtime.GOOS != "linux" {
+		return nil, fmt.Errorf("The Docker daemon is only supported on linux")
+	}
+
+	daemon := &Daemon{
+		config:         config,
+		eng:            eng,
+	}
+	// Setup shutdown handlers
+	// FIXME: can these shutdown handlers be registered closer to their source?
+	eng.OnShutdown(func() {
+		// FIXME: if these cleanup steps can be called concurrently, register
+		// them as separate handlers to speed up total shutdown time
+		// FIXME: use engine logging instead of log.Errorf
+		if err := portallocator.ReleaseAll(); err != nil {
+			log.Errorf("portallocator.ReleaseAll(): %s", err)
+		}
+	})
+
+	return daemon, nil
+}
+
 func NewDaemonFromDirectory(config *Config, eng *engine.Engine) (*Daemon, error) {
 	// Apply configuration defaults
 	if config.Mtu == 0 {
